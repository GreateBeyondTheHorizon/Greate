plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0.18,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
}

version = '0.0.13'
group = 'electrolyte.greate'
archivesBaseName = 'greate'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') //needed since gt dependency does not include one

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'greate'

            property "mixin.env.remapRefMap", 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            arg "-mixin.config=greate.mixin.json"

            mods {
                greate {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'greate'

            property "mixin.env.remapRefMap", 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            arg "-mixin.config=greate.mixin.json"

            mods {
                greate {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'greate'

            mods {
                greate {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property "mixin.env.remapRefMap", 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            arg "-mixin.config=greate.mixin.json"

            args '--mod', 'greate', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing-mod', 'create'

            mods {
                greate {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url = 'https://maven.tterrag.com/'
        content {
            includeGroup "com.simibubi.create"
            includeGroup "com.jozufozu.flywheel"
            includeGroup "com.tterrag.registrate"
        }
    }
    maven { url = 'https://maven.blamejared.com'
        content {
            includeGroup "mezz.jei"
        }
    }
    maven { url = 'https://maven.architectury.dev/'
        content {
            includeGroup "dev.architectury"
        }
    }
    maven { url = 'https://maven.saps.dev/minecraft'
        content {
            includeGroup 'dev.latvian.mods'
        }
    }
    maven { url = 'https://cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url = 'https://maven.firstdarkdev.xyz/snapshots'
        content {
            includeGroup 'com.lowdragmc.ldlib'
            includeGroup 'com.gregtechceu.gtceu'
            includeGroup 'dev.toma.configuration'
        }
    }
    maven { url = 'https://jitpack.io' } //mixinextras
}

dependencies {
    minecraft "net.neoforged:forge:${minecraft_version}-${forge_version}"

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    implementation fg.deobf("com.simibubi.create:create-${minecraft_version}:${create_version}:slim") { transitive = false }
    implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-${minecraft_version}:${flywheel_version}")
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")

    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")

    implementation fg.deobf("dev.architectury:architectury-forge:${architectury_version}")
    implementation fg.deobf("dev.latvian.mods:rhino-forge:${rhino_version}")
    implementation fg.deobf("dev.latvian.mods:kubejs-forge:${kubejs_version}")
    implementation fg.deobf("dev.latvian.mods:kubejs-create-forge:${kubejs_create_version}")
    implementation fg.deobf("com.lowdragmc.ldlib:ldlib-forge-${minecraft_version}:${ldlib_version}") { transitive = false }
    implementation fg.deobf("com.gregtechceu.gtceu:gtceu-${minecraft_version}:${gregtech_version}:slim") { transitive = false }
    runtimeOnly fg.deobf("dev.toma.configuration:configuration-forge-${minecraft_version}:${configuration_version}")
    runtimeOnly fg.deobf("curse.maven:jade-324717:${jade_version}")
    runtimeOnly fg.deobf("curse.maven:spark-361579:${spark_version}")

    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.2"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.3.2")) {
        jarJar.ranged(it, "[0.3.2,)")
    }
}

mixin {
    add sourceSets.main, "greate.mixin-refmap.json"
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "greate",
                "Specification-Vendor"    : "electrolyte",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "electrolyte",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "TweakOrder": 0,
                "MixinConfigs": "greate.mixin.json"
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
